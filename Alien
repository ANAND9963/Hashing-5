public class AlienDictionary {

    public String alienOrder(String[] words) {
        List<List<Integer>> adjList = new ArrayList<>()
        for (int i = 0; i < 26; i++) {
            adjList.add(new ArrayList<>())
        }

        int[] inDegrees = new int[26]
        Arrays.fill(inDegrees, -1)
        for (String w : words) {
            for (char c : w.toCharArray()) {
                inDegrees[c - 'a'] = 0
            }
        }

        for (int j = 0; j < words.length - 1; j++) {
            String word1 = words[j]
            String word2 = words[j + 1]
            int len = Math.min(word1.length(), word2.length())
            boolean diff = false
            for (int i = 0; i < len; i++) {
                int u = word1.charAt(i) - 'a'
                int v = word2.charAt(i) - 'a'
                // differentiating character decides an edge from u -> v
                if (u != v) {
                    adjList.get(u).add(v)
                    // in-degree
                    inDegrees[v]++
                    diff = true
                    break
                }
            }
            if (!diff && word1.length() > word2.length()) {
                return ''
            }
        }

        // for topo sort, we need to know the unique chars present
        int uniqueCharCount = 0
        // add to queue
        Deque<Integer> queue = new ArrayDeque<>()
        for (int i = 0; i < 26; i++) {
            if (inDegrees[i] < 0) {
                // char not present in words
                continue
            }
            if (inDegrees[i] == 0) {
                // mark as source for BFS
                queue.offer(i)
            }
            uniqueCharCount++
        }

        StringBuilder topoSort = new StringBuilder()
        while (!queue.isEmpty()) {
            int curr = queue.poll()
            topoSort.append((char) (curr + 'a'))

            for (int neighbour : adjList.get(curr)) {
                inDegrees[neighbour]--
                if (inDegrees[neighbour] == 0) {
                    queue.offer(neighbour)
                }
            }
        }

        if (topoSort.length() == uniqueCharCount) {
            return topoSort.toString()
        }
        return ''
    }

}
